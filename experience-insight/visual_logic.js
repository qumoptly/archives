"use strict";

/**
 * Generated by Verge3D Puzzles v.2.8.3
 * Mon Nov 12 2018 10:02:56 GMT-0800 (Pacific Standard Time)
 */

(function() {
    

// global variables/constants used by blocks' functions
var _pGlob = {};

_pGlob.fadeAnnotations = true;

// differs from the other utility callback arrays, cannot be used with the
// fireObjectPickingCallbacks() method
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = '';
_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = '';

_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.animMixerCallbacks = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

PL.legacyMode = false;

PL.execInitPuzzles = function() {

    var _initGlob = {};
    
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

        _initGlob.output.initOptions.fadeAnnotations = true;
    _initGlob.output.initOptions.useBkgTransp = false;
    _initGlob.output.initOptions.preserveDrawBuf = false;
    _initGlob.output.initOptions.useCompAssets = true;
    _initGlob.output.initOptions.useFullscreen = false;

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

    initOptions = initOptions || {};

    if ('fadeAnnotations' in initOptions) {
        _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
    }

var arm_b_glow, parts_list, partToLookAt, mode;


    // utility function envoked by almost all V3D-specific blocks
    // process object input, which can be either single obj or array of objects, or a group
    function retrieveObjectNames(objNames) {
        var acc = [];
        retrieveObjectNamesAcc(objNames, acc);
        return acc;
    }

    function retrieveObjectNamesAcc(currObjNames, acc) {
        if (typeof currObjNames == "string") {
            acc.push(currObjNames);
        } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
            var newObj = getObjectNamesByGroupName(currObjNames[1]);
            for (var i = 0; i < newObj.length; i++)
                acc.push(newObj[i]);
        } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
            var newObj = getAllObjectNames();
            for (var i = 0; i < newObj.length; i++)
                acc.push(newObj[i]);
        } else if (Array.isArray(currObjNames)) {
            for (var i = 0; i < currObjNames.length; i++)
                retrieveObjectNamesAcc(currObjNames[i], acc);
        }
    }



// utility function envoked by almost all V3D-specific blocks
// find first occurence of the object by its name
var objCache = {};
function getObjectByName(objName) {
    var objFound;
    objFound = objCache[objName];
    if (objFound && objFound.name == objName)
        return objFound;
    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            objCache[objName] = objFound;
        }
    });
    return objFound;
}



// utility function envoked by almost all V3D-specific blocks
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}



// utility function envoked by almost all V3D-specific blocks
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type != "Scene" && obj.type != "AmbientLight" &&
            obj.name != "" && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific blocks
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}

function swizzleValueSign(newAxis, value) {
    newAxis = newAxis.toLowerCase();

    if (newAxis == 'z') {
        if (typeof value == 'number')
            return -value
        else if (typeof value == 'string' && value != '' && value != "''" && value != '""')
            return String(-Number(value));
        else
            return value;
    } else
        return value;
}

function swizzleVec3(vec) {

    var dest = []

    dest[0] = vec[0];
    dest[1] = vec[2];
    dest[2] = swizzleValueSign('z', vec[1])

    return dest;
}




        // show and hide blocks
        function changeVis(objNames, bool) {
            objNames = retrieveObjectNames(objNames);
            if (!objNames)
                return;
            for (var i = 0; i < objNames.length; i++) {
                var objName = objNames[i]
                if (!objName)
                    continue;
                var obj = getObjectByName(objName);
                if (!obj)
                    continue;
                obj.visible = bool;
            }
        }



        // outline block
        function outline(objNames, doWhat) {
            objNames = retrieveObjectNames(objNames);
            if (!objNames)
                return;
            if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
                return;
            var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
            for (var i = 0; i < objNames.length; i++) {
                var objName = objNames[i];
                var obj = getObjectByName(objName);
                if (!obj)
                    continue;
                if (doWhat == "ENABLE") {
                    if (outlineArray.indexOf(obj) == -1)
                        outlineArray.push(obj);
                } else {
                    var index = outlineArray.indexOf(obj);
                    if (index > -1)
                        outlineArray.splice(index, 1);
                }
            }
        }



    // utility function used by the whenClicked, whenHovered and whenDraggedOver blocks
    function initObjectPicking(callback, eventType, mouseDownUseTouchStart) {

        var elem = appInstance.renderer.domElement;
        elem.addEventListener(eventType, pickListener);
        if (eventType == "mousedown") {
            var touchEventName = mouseDownUseTouchStart ? "touchstart" : "touchend";
            elem.addEventListener(touchEventName, pickListener);
        }

        var raycaster = new v3d.Raycaster();
        var coords = new v3d.Vector2();
        function pickListener(event) {
            event.preventDefault();

            var xNorm = 0, yNorm = 0;
            if (event instanceof MouseEvent) {
                xNorm = event.offsetX / elem.clientWidth;
                yNorm = event.offsetY / elem.clientHeight;
            } else if (event instanceof TouchEvent) {
                var rect = elem.getBoundingClientRect();
                xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
                yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
            }

            coords.x = xNorm * 2 - 1;
            coords.y = -yNorm * 2 + 1;
            raycaster.setFromCamera(coords, appInstance.camera);
            var objList = [];
            appInstance.scene.traverse(function(obj){objList.push(obj);});
            var intersects = raycaster.intersectObjects(objList);
            if (intersects.length > 0) {
                var obj = intersects[0].object;
                callback(obj, event);
            } else {
                callback(null, event);
            }
        }
    }

    // utility function used by the whenDraggedOver blocks
    function fireObjectPickingCallbacks(objName, source, index, cbParam) {
        for (var i = 0; i < source.length; i++) {
            var cb = source[i];
            if (objectsIncludeObj([cb[0]], objName)) {
                cb[index](cbParam);
            }
        }
    }

    function objectsIncludeObj(objNames, testedObjName) {
        if (!testedObjName) return false;

        for (var i = 0; i < objNames.length; i++) {
            if (testedObjName == objNames[i]) {
                return true;
            } else {
                // also check children which are auto-generated for multi-material objects
                var obj = getObjectByName(objNames[i]);
                if (obj && obj.type == "Group") {
                    for (var j = 0; j < obj.children.length; j++) {
                        if (testedObjName == obj.children[j].name) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    // utility function used by the whenClicked, whenHovered and whenDraggedOver blocks
    function getPickedObjectName(obj) {
        // auto-generated from a multi-material object, use parent name instead
        if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
            return obj.parent.name;
        } else {
            return obj.name;
        }
    }



        // whenClicked block
        initObjectPicking(function(obj) {

            // save the object for the pickedObject block
            _pGlob.pickedObject = obj ? getPickedObjectName(obj) : '';

            _pGlob.objClickCallbacks.forEach(function(el) {
                var isPicked = obj && objectsIncludeObj(el.objNames, getPickedObjectName(obj));
                el.callbacks[isPicked ? 0 : 1]();
            });
        }, 'mousedown');



        // whenClicked block
        function registerOnClick(objNames, cbDo, cbIfMissedDo) {
            objNames = retrieveObjectNames(objNames) || [];
            var objNamesFiltered = objNames.filter(function(name) {
                return name;
            });
            _pGlob.objClickCallbacks.push({
                objNames: objNamesFiltered,
                callbacks: [cbDo, cbIfMissedDo]
            });
        }


function embedMode() {
  changeVis("ground", false);
  changeVis("ground_detail", false);
  changeVis("sky_cylinder", false);
  changeVis("ground_and_sky_dome", true);
}
appInstance.ExternalInterface["embedMode"] = embedMode;



        function objConstraintAddLimit(constraintName, objNames, mode, min, max) {
            objNames = retrieveObjectNames(objNames);
            if (!objNames) return;

            for (var i = 0; i < objNames.length; i++) {
                var objName = objNames[i];
                if (!objName) continue;

                var obj = getObjectByName(objName);
                if (!obj || !obj.constraints) continue;

                for (var j = obj.constraints.length - 1; j >= 0; j--) {
                    if (obj.constraints[j].name == constraintName) {
                        obj.constraints.splice(j, 1);
                    }
                }

                switch (mode) {
                    case 'POS_X':
                    case 'POS_Y':
                    case 'POS_Z':
                        var cons = new v3d.LimitLocationConstraint();
                        cons.name = constraintName;
                        var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 1 : 2);

                        // swizzle sign and limits order
                        if (mode == 'POS_Z') {
                            cons.min.setComponent(compIndex, -max);
                            cons.max.setComponent(compIndex, -min);
                        } else {
                            cons.min.setComponent(compIndex, min);
                            cons.max.setComponent(compIndex, max);
                        }
                        obj.constraints.push(cons);
                        break;

                    case 'ROT_X':
                    case 'ROT_Y':
                    case 'ROT_Z':
                        var cons = new v3d.LimitRotationConstraint();
                        cons.name = constraintName;
                        cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Y' : 'Z');

                        // swizzle sign and limits order
                        if (mode == 'ROT_Z') {
                            cons.min = v3d.Math.degToRad(-max);
                            cons.max = v3d.Math.degToRad(-min);
                        } else {
                            cons.min = v3d.Math.degToRad(min);
                            cons.max = v3d.Math.degToRad(max);
                        }

                        obj.constraints.push(cons);
                        break;

                    case 'SCALE_X':
                    case 'SCALE_Y':
                    case 'SCALE_Z':
                        var cons = new v3d.LimitScaleConstraint();
                        cons.name = constraintName;
                        var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 1 : 2);
                        cons.min.setComponent(compIndex, min);
                        cons.max.setComponent(compIndex, max);
                        obj.constraints.push(cons);
                        break;
                }
            }
        }


function completeMode() {
  changeVis("ground", true);
  changeVis("ground_detail", true);
  changeVis("sky_cylinder", true);
  changeVis("ground_and_sky_dome", false);
}
appInstance.ExternalInterface["completeMode"] = completeMode;



        // whenHovered block
        initObjectPicking(function(obj) {

            var prevHovered = _pGlob.hoveredObject;
            var currHovered = obj ? getPickedObjectName(obj) : "";

            if (prevHovered == currHovered) return;

            // first - all "out" callbacks, then - all "over"
            _pGlob.objHoverCallbacks.forEach(function(el) {
                if (objectsIncludeObj(el.objNames, prevHovered)) {
                    // ensure the correct value of the hoveredObject block
                    _pGlob.hoveredObject = prevHovered;
                    el.callbacks[1]();
                }
            });

            _pGlob.objHoverCallbacks.forEach(function(el) {
                if (objectsIncludeObj(el.objNames, currHovered)) {
                    // ensure the correct value of the hoveredObject block
                    _pGlob.hoveredObject = currHovered;
                    el.callbacks[0]();
                }
            });

            _pGlob.hoveredObject = currHovered;
        }, 'mousemove');



        // whenHovered block
        function registerOnHover(objNames, callback_over, callback_out) {
            objNames = retrieveObjectNames(objNames) || [];
            var objNamesFiltered = objNames.filter(function(name) {
                return name;
            });

            _pGlob.objHoverCallbacks.push({
                objNames: objNamesFiltered,
                callbacks: [callback_over, callback_out]
            });
        }



        // dragRotate block
        function dragRotate(objNames, mode, isParentSpace, blockId, parentDragOverBlockId) {
            if (!appInstance.camera) return;

            objNames = retrieveObjectNames(objNames);
            if (!objNames) return;

            var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
            if (!info) return;

            for (var i = 0; i < objNames.length; i++) {
                var obj = getObjectByName(objNames[i]);

                if (mode == "X" || mode == "Y" || mode == "Z") {
                    var objPos = obj.getWorldPosition(_pGlob.vec3Tmp);
                    objPos.project(appInstance.camera);

                    var objX = (objPos.x + 1) / 2 * appInstance.getWidth();
                    var objY = (-objPos.y + 1) / 2 * appInstance.getHeight();
                    var vecFrom = _pGlob.vec2Tmp.set(info.prevX - objX, objY - info.prevY);
                    var vecTo = _pGlob.vec2Tmp2.set(info.currX - objX, objY - info.currY);

                    var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                            : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z));
                    var quat = _pGlob.quatTmp.setFromAxisAngle(axis, vecTo.angle() - vecFrom.angle());

                    // a rotation axis pointing backwards (i.e. co-directionally
                    // aligned with the view vector) should have inverted rotation
                    var objToCalcSpace = isParentSpace && obj.parent ? obj.parent : obj;
                    axis.applyQuaternion(objToCalcSpace.getWorldQuaternion(_pGlob.quatTmp2));

                    var viewVec = appInstance.camera.getWorldDirection(_pGlob.vec3Tmp2);
                    if (viewVec.dot(axis) > 0) {
                        quat.conjugate();
                    }

                    if (isParentSpace) {
                        obj.quaternion.premultiply(quat);
                    } else {
                        obj.quaternion.multiply(quat);
                    }
                    obj.updateMatrixWorld(true);
                }
            }
        }



    function eventGetOffsetCoords(e, touchId, dest) {
        if (e instanceof MouseEvent) {
            dest.set(e.offsetX, e.offsetY);
        } else if (window.TouchEvent && e instanceof TouchEvent) {
            var rect = e.target.getBoundingClientRect();
            var touches = e.touches;
            if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
                touches = e.changedTouches;
            }

            var touch = touches[0];
            for (var i = 0; i < touches.length; i++) {
                if (touches[i].identifier == touchId) {
                    touch = touches[i];
                    break;
                }
            }

            dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
        }
        return dest;
    }



    function eventTouchIdGetFirst(e) {
        if (e instanceof MouseEvent) {
            return -1;
        } else if (window.TouchEvent && e instanceof TouchEvent) {
            if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
                return e.changedTouches[0].identifier;
            } else {
                return e.touches[0].identifier;
            }
        }
        return -1;
    }



    function eventTouchIdChangedFilter(e, touchId) {
        if (window.TouchEvent && e instanceof TouchEvent) {
            if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
                var isChanged = false;
                for (var i = 0; i < e.changedTouches.length; i++) {
                    if (e.changedTouches[i].identifier == touchId) {
                        isChanged = true;
                        break;
                    }
                }
                return isChanged;
            }
        }

        return true;
    }



    function initDragOverInfo() {
        return {
            draggedObjName: '',
            downX: 0, downY: 0,
            prevX: 0, prevY: 0,
            currX: 0, currY: 0,
            isDowned: false,
            isMoved: false,
            touchId: -1
        };
    }



        // whenDraggedOver block
        initObjectPicking(function(obj, downEvent) {
            if (!obj) {
                return;
            }

            var objName = getPickedObjectName(obj);
            fireObjectPickingCallbacks(objName, _pGlob.objDragOverCallbacks, 1,
                    { downEvent: downEvent, draggedObjName: objName });
        }, "mousedown", true);



        // whenDraggedOver block

        function registerOnDrag(objNames, callback_start, callback_move, callback_drop, blockId) {
            objNames = retrieveObjectNames(objNames);
            if (!objNames)
                return;
            var cb = function(cbParam) {

                if (appInstance.controls) {
                    appInstance.controls.enabled = false;
                }

                if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
                    _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
                }
                var info = _pGlob.objDragOverInfoByBlock[blockId];

                // NOTE: don't use more than one pointing event, e.g. don't process
                // some events related to multitouch actions
                if (info.isDowned) {
                    return;
                }

                var touchId = eventTouchIdGetFirst(cbParam.downEvent);
                var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                        _pGlob.vec2Tmp);

                info.downX = info.prevX = info.currX = coords.x;
                info.downY = info.prevY = info.currY = coords.y;
                info.touchId = touchId;
                info.isDowned = true;
                info.isMoved = false;
                info.draggedObjName = cbParam.draggedObjName;

                callback_start();

                var elem = appInstance.renderer.domElement;

                var moveCb = function(e) {
                    if (!eventTouchIdChangedFilter(e, info.touchId)) {
                        // don't handle events not intended for this particular touch
                        return;
                    }

                    var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
                    info.prevX = info.currX;
                    info.prevY = info.currY;
                    info.currX = coords.x;
                    info.currY = coords.y;
                    callback_move();
                    info.isMoved = true;
                }
                var upCb = function(e) {
                    if (!eventTouchIdChangedFilter(e, info.touchId)) {
                        // don't handle events not intended for this particular touch
                        return;
                    }

                    var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
                    info.currX = coords.x;
                    info.currY = coords.y;
                    info.prevX = info.currX;
                    info.prevY = info.currY;
                    callback_drop();
                    info.isDowned = false;

                    elem.removeEventListener("mousemove", moveCb, false);
                    elem.removeEventListener("touchmove", moveCb, false);
                    elem.removeEventListener("mouseup", upCb, false);
                    elem.removeEventListener("touchend", upCb, false);
                    if (appInstance.controls) {
                        appInstance.controls.enabled = true;
                    }
                }

                elem.addEventListener("mousemove", moveCb, false);
                elem.addEventListener("touchmove", moveCb, false);
                elem.addEventListener("mouseup", upCb, false);
                elem.addEventListener("touchend", upCb, false);
            }
            for (var i = 0; i < objNames.length; i++) {
                var objName = objNames[i];
                if (!objName) continue;
                _pGlob.objDragOverCallbacks.push([objName, cb]);
            }
        }


function startManualControl() {
  changeVis(["GROUP", "arm_for_hide"], false);
  changeVis(["GROUP", "arm_mannipulate"], true);
  outline(arm_b_glow, "ENABLE");
}
appInstance.ExternalInterface["startManualControl"] = startManualControl;


function exitManualControl() {
  changeVis(["GROUP", "arm_for_hide"], true);
  changeVis(["GROUP", "arm_mannipulate"], false);
}
appInstance.ExternalInterface["exitManualControl"] = exitManualControl;



        // getAnimations block
        function getAnimations(objNames) {
            objNames = retrieveObjectNames(objNames);
            if (!objNames)
                return;
            var animations = [];
            for (var i = 0; i < objNames.length; i++) {
                var objName = objNames[i];
                if (!objName)
                    continue;
                // use objName as animName - for now we have one-to-one match
                var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
                if (action)
                    animations.push(objName);
            }
            return animations;
        }



        function getSceneByAction(action) {
            var root = action.getRoot();
            var scene = root.type == "Scene" ? root : null;
            root.traverseAncestors(function(ancObj) {
                if (ancObj.type == "Scene") {
                    scene = ancObj;
                }
            });
            return scene;
        }



        function getSceneAnimFrameRate(scene) {
            if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
                return scene.userData.v3d.animFrameRate;
            }
            return 24;
        }



        // playAnimation, playAnimationExt and stopAnimation blocks
        (function() {
            appInstance.mixer.addEventListener("finished", function(e) {
                var cb = _pGlob.animMixerCallbacks;
                var found = [];
                for (var i = 0; i < cb.length; i++) {
                    if (cb[i][0] == e.action) {
                        cb[i][0] = null; // desactivate
                        found.push(cb[i][1]);
                    }
                }
                for (var i = 0; i < found.length; i++) {
                    found[i]();
                }
            });
        })();



        // playAnimation, playAnimationExt and stopAnimation blocks
        function operateAnimation(operation, animations, from, to, loop, timeScale, callback) {
            if (!animations) return;
            // input can be either single obj or array of objects
            if (typeof animations == "string") animations = [animations];
            for (var i = 0; i < animations.length; i++) {
                var animName = animations[i];
                if (!animName) continue;
                var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
                if (!action) continue;
                switch (operation) {
                case "PLAY":
                    if (!action.isRunning()) {
                        action.reset();
                        if (loop && (loop != "AUTO"))
                            action.loop = v3d[loop];
                        var scene = getSceneByAction(action);
                        var frameRate = getSceneAnimFrameRate(scene);
                        if (timeScale == 1) {
                            action.timeScale = Math.abs(action.timeScale);
                            action.time = from ? from/frameRate : 0;
                            if (to)
                                action.getClip().duration = to/frameRate;
                        } else {
                            action.timeScale = -Math.abs(action.timeScale);
                            action.time = to ? to/frameRate : action.getClip().duration;
                        }
                        // action.time outside of the clip bounds can prevent the action from playing
                        action.time = v3d.Math.clamp(action.time, 0, action.getClip().duration);
                        action.paused = false;
                        action.play();

                        // push unique callbacks only
                        var callbacks = _pGlob.animMixerCallbacks;
                        var found = false;

                        for (var j = 0; j < callbacks.length; j++)
                            if (callbacks[j][0] == action && callbacks[j][1] == callback)
                                found = true;

                        if (!found)
                            _pGlob.animMixerCallbacks.push([action, callback]);
                    }
                    break;
                case "STOP":
                    action.stop();

                    // remove callbacks
                    var callbacks = _pGlob.animMixerCallbacks;
                    for (var j = 0; j < callbacks.length; j++)
                        if (callbacks[j][0] == action) {
                            callbacks.splice(j, 1);
                            j--
                        }

                    break;
                case "PAUSE":
                    action.paused = true;
                    break;
                case "RESUME":
                    action.paused = false;
                    break;
                case "SET_FRAME":
                    var frameRate = getSceneAnimFrameRate(scene);
                    action.time = from ? from/frameRate : 0;
                    action.play();
                    action.paused = true;
                    break;
                }
            }
        }



        // callJSFunction block
        function getJSFunction(funcName) {
            var jsFunc = appInstance.ExternalInterface[funcName];
            if (typeof jsFunc == "function")
                return jsFunc;
            else
                return function() {};
        }


function animateSeis() {
  operateAnimation("STOP", getAnimations(["GROUP", "arm3"]), null, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm3"]), 1690, null, 'AUTO', 1, function() {});
  operateAnimation("PLAY", getAnimations(["GROUP", "arm2"]), 1250, 2110, 'AUTO', 1, function() {
    getJSFunction('doneAnimating')();
  });
}
appInstance.ExternalInterface["animateSeis"] = animateSeis;


function prepareForFade() {
  operateAnimation("PAUSE", getAnimations(["GROUP", "arm2"]), null, null, 'AUTO', 1, function() {});
  operateAnimation("PAUSE", getAnimations(["GROUP", "panels"]), null, null, 'AUTO', 1, function() {});
  operateAnimation("PAUSE", getAnimations("ICC"), null, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["prepareForFade"] = prepareForFade;


function disableICCGlow() {
  outline("ICC", "DISABLE");
}
appInstance.ExternalInterface["disableICCGlow"] = disableICCGlow;


function animatePanels() {
  operateAnimation("PLAY", getAnimations(["GROUP", "panels"]), 0, 520, 'AUTO', 1, function() {
    getJSFunction('doneAnimating')();
  });
}
appInstance.ExternalInterface["animatePanels"] = animatePanels;


function animateICC() {
  outline("ICC", "ENABLE");
  operateAnimation("PLAY", getAnimations("lens_cap_ICC"), 520, 620, 'AUTO', 1, function() {
    getJSFunction('doneAnimating')();
    outline("ICC", "DISABLE");
  });
}
appInstance.ExternalInterface["animateICC"] = animateICC;


function resetPanels() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "panels"]), 0, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["resetPanels"] = resetPanels;


function endPanels() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "panels"]), 520, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["endPanels"] = endPanels;


function deployAll() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "panels"]), 520, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", "lens_cap_ICC", 620, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm"]), 1000, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm2"]), 2110, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm3"]), 3270, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm4"]), 4150, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["deployAll"] = deployAll;


function resetICC() {
  operateAnimation("SET_FRAME", "lens_cap_ICC", 0, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["resetICC"] = resetICC;


function endICC() {
  operateAnimation("SET_FRAME", "lens_cap_ICC", 620, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["endICC"] = endICC;


function animateArm() {
  operateAnimation("PLAY", getAnimations(["GROUP", "arm"]), 620, 1250, 'AUTO', 1, function() {
    getJSFunction('doneAnimating')();
  });
}
appInstance.ExternalInterface["animateArm"] = animateArm;


function resetArm() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm"]), 0, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["resetArm"] = resetArm;


function endArm() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm"]), 1000, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["endArm"] = endArm;


function resetAllAnimations() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm2"]), 0, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm3"]), 0, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm4"]), 0, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm"]), 0, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "panels"]), 0, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", "lens_cap_ICC", 0, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["resetAllAnimations"] = resetAllAnimations;


function resetSeis() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm2"]), 1000, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["resetSeis"] = resetSeis;


function endSeis() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm2"]), 1710, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["endSeis"] = endSeis;



        // updateTextObject block
        function objConstraintOperations(constraintName, operation, objNames) {
            objNames = retrieveObjectNames(objNames);
            if (!objNames) return;

            for (var i = 0; i < objNames.length; i++) {
                var objName = objNames[i];
                if (!objName) continue;

                var obj = getObjectByName(objName);
                if (!obj || !obj.constraints) continue;

                for (var j = obj.constraints.length - 1; j >= 0; j--) {
                    var c = obj.constraints[j];
                    if (c.name == constraintName) {
                        if (operation == 'REMOVE') {
                            obj.constraints.splice(j, 1);
                        } else if (operation == 'MUTE') {
                            c.mute = true;
                        } else if (operation == 'UNMUTE') {
                            c.mute = false;
                        }
                    }
                }
            }
        }


function resetShield() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm3"]), 1690, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["resetShield"] = resetShield;


function endShield() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm3"]), 3270, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["endShield"] = endShield;


function resetHp3() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm4"]), 2570, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["resetHp3"] = resetHp3;


function animateShield() {
  operateAnimation("STOP", getAnimations(["GROUP", "arm4"]), null, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm4"]), 2570, null, 'AUTO', 1, function() {});
  operateAnimation("PLAY", getAnimations(["GROUP", "arm3"]), 2110, 2410, 'AUTO', 1, function() {
    objConstraintOperations('Child Of', "REMOVE", "WTS_v3d");
    operateAnimation("PLAY", getAnimations(["GROUP", "arm3"]), 2410, 2945, 'AUTO', 1, function() {
      objConstraintOperations('Child Of', "REMOVE", "WTS_v3d");
      objConstraintOperations('Location Of', "REMOVE", "WTS_v3d");
      operateAnimation("PLAY", getAnimations(["GROUP", "arm3"]), 2945, 3170, 'AUTO', 1, function() {
        getJSFunction('doneAnimating')();
      });
    });
  });
}
appInstance.ExternalInterface["animateShield"] = animateShield;


function endHp3() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm4"]), 4150, null, 'AUTO', 1, function() {});
}
appInstance.ExternalInterface["endHp3"] = endHp3;


function resetToManualMode() {
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm2"]), 0, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm3"]), 0, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm4"]), 0, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm"]), 0, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "panels"]), 520, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", "lens_cap_ICC", 512, null, 'AUTO', 1, function() {});
  outline("ICC", "DISABLE");
}
appInstance.ExternalInterface["resetToManualMode"] = resetToManualMode;


function animateHp3() {
  operateAnimation("STOP", getAnimations(["GROUP", "arm3"]), null, null, 'AUTO', 1, function() {});
  operateAnimation("SET_FRAME", getAnimations(["GROUP", "arm3"]), 3270, null, 'AUTO', 1, function() {});
  operateAnimation("PLAY", getAnimations(["GROUP", "arm4"]), 3250, 3490, 'AUTO', 1, function() {
    objConstraintOperations('Child Of', "REMOVE", "HP3_v3d");
    operateAnimation("PLAY", getAnimations(["GROUP", "arm4"]), 3490, 3860, 'AUTO', 1, function() {
      objConstraintOperations('Child Of', "REMOVE", "HP3_v3d");
      objConstraintOperations('Location Of', "REMOVE", "HP3_v3d");
      operateAnimation("PLAY", getAnimations(["GROUP", "arm4"]), 3860, 4150, 'AUTO', 1, function() {
        getJSFunction('doneAnimating')();
      });
    });
  });
}
appInstance.ExternalInterface["animateHp3"] = animateHp3;


function highlightSolarPanels() {
  outline(["GROUP", "panels"], "ENABLE");
}
appInstance.ExternalInterface["highlightSolarPanels"] = highlightSolarPanels;


// groups do not work when called from list
function removeHighlights() {
  outline(["GROUP", "panels"], "DISABLE");
  outline(["GROUP", "arm_for_glow"], "DISABLE");
  outline(parts_list, "DISABLE");
}
appInstance.ExternalInterface["removeHighlights"] = removeHighlights;


function highlightICC() {
  outline("ICC", "ENABLE");
}
appInstance.ExternalInterface["highlightICC"] = highlightICC;


function highlightArm() {
  outline(["GROUP", "arm_for_glow"], "ENABLE");
}
appInstance.ExternalInterface["highlightArm"] = highlightArm;


function highlightIDC() {
  outline("IDC", "ENABLE");
}
appInstance.ExternalInterface["highlightIDC"] = highlightIDC;


function highlightGrapple() {
  outline("grapple", "ENABLE");
}
appInstance.ExternalInterface["highlightGrapple"] = highlightGrapple;


function highlightSEIS() {
  outline("SEIS_baked", "ENABLE");
}
appInstance.ExternalInterface["highlightSEIS"] = highlightSEIS;


function setModeLearn() {
  mode = 'learn';
}
appInstance.ExternalInterface["setModeLearn"] = setModeLearn;


function highlightHP3() {
  outline("HP3_v3d_baked", "ENABLE");
}
appInstance.ExternalInterface["highlightHP3"] = highlightHP3;


function setModeBlank() {
  mode = '';
}
appInstance.ExternalInterface["setModeBlank"] = setModeBlank;


function highlightRISE() {
  outline("RISE_antennas", "ENABLE");
}
appInstance.ExternalInterface["highlightRISE"] = highlightRISE;



        // tweenCamera block
        function tweenCamera(posObjName, targetObjName, duration) {
            if (!targetObjName)
                return;
            if (posObjName)
                var posObj = getObjectByName(posObjName);
            else
                var posObj = appInstance.camera;
            var targetObj = getObjectByName(targetObjName);
            if (!posObj || !targetObj)
                return;

            var wPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
            var wTarget = targetObj.getWorldPosition(_pGlob.vec3Tmp2);

            if (appInstance.controls && appInstance.controls.tween) { // orbit camera
                if (!appInstance.controls.inTween)
                    appInstance.controls.tween(wPos, wTarget, duration);
            } else { // TODO flying and static camera, just position it for now
                if (appInstance.camera.parent) {
                    appInstance.camera.parent.worldToLocal(wPos);
                }
                appInstance.camera.position.copy(wPos);
                appInstance.camera.lookAt(wTarget);
            }
        }


function lookAtPart(partToLookAt) {
  tweenCamera('', partToLookAt, 1);
}
appInstance.ExternalInterface["lookAtPart"] = lookAtPart;


function highlightUHF() {
  outline("UHF_antenna", "ENABLE");
}
appInstance.ExternalInterface["highlightUHF"] = highlightUHF;


function highlightTWINS() {
  outline("TWINS", "ENABLE");
}
appInstance.ExternalInterface["highlightTWINS"] = highlightTWINS;


function highlightPressureInlet() {
  outline("pressure_inlet", "ENABLE");
}
appInstance.ExternalInterface["highlightPressureInlet"] = highlightPressureInlet;


function highlightShield() {
  outline("WTS_v3d_baked", "ENABLE");
}
appInstance.ExternalInterface["highlightShield"] = highlightShield;



registerOnClick("button_manual_grey", function() {
  changeVis("button_manual_grey", false);
  changeVis("button_manual_control", true);
  changeVis(["GROUP", "arm_for_hide"], false);
  changeVis(["GROUP", "arm_mannipulate"], true);
  outline(["GROUP", "arm_mannipulate"], "ENABLE");
  outline("grapple_b", "DISABLE");
  outline("arm_01_c", "DISABLE");
}, function() {});

registerOnClick("button_manual_control", function() {
  changeVis("button_manual_control", false);
  changeVis("button_manual_grey", true);
  changeVis(["GROUP", "arm_mannipulate"], false);
  changeVis(["GROUP", "arm_for_hide"], true);
}, function() {});

objConstraintAddLimit('Limit Rotation', "arm_01_b", "ROT_Y", -12, 60);
objConstraintAddLimit('Limit Rotation', "arm_02_b", "ROT_X", -20, 72);
objConstraintAddLimit('Limit Rotation', "arm_03_b", "ROT_X", -90, 20);
objConstraintAddLimit('Limit Rotation', "shovel_b", "ROT_X", -70, 110);

registerOnHover("arm_01_c", function() {
  outline(arm_b_glow, "DISABLE");
  changeVis("arm_01_arrow", true);
  outline("arm_01_b", "ENABLE");
}, function() {
  changeVis("arm_01_arrow", false);
  outline("arm_01_b", "DISABLE");
});

registerOnDrag("arm_01_c", function() {},
            function() {
  outline(arm_b_glow, "DISABLE");
  dragRotate("arm_01_b", "Y", true, "W=Qq(1qrirgQi[ELZ$GU", "*/rw:li16hug|g[_Iz.y");
  changeVis("arm_01_arrow", true);
  outline("arm_01_b", "ENABLE");
},
            function() {
  changeVis("arm_01_arrow", false);
  outline("arm_01_b", "DISABLE");
}, "*/rw:li16hug|g[_Iz.y");

arm_b_glow = ["arm_01_b", "arm_02_b", "arm_03_b", "shovel_b"];

registerOnHover("arm_02_c", function() {
  outline(arm_b_glow, "DISABLE");
  changeVis("arm_02_arrow", true);
  outline("arm_02_b", "ENABLE");
}, function() {
  changeVis("arm_02_arrow", false);
  outline("arm_02_b", "DISABLE");
});

registerOnDrag("arm_02_c", function() {},
            function() {
  outline(arm_b_glow, "DISABLE");
  dragRotate("arm_02_b", "X", true, "m_#n3L,*l2a#0~k=?!@|", "rq^@C3)6%I:7!~{1Ib`j");
  changeVis("arm_02_arrow", true);
  outline("arm_02_b", "ENABLE");
},
            function() {
  changeVis("arm_02_arrow", false);
  outline("arm_02_b", "DISABLE");
}, "rq^@C3)6%I:7!~{1Ib`j");

registerOnDrag("shovel_c", function() {},
            function() {
  outline(arm_b_glow, "DISABLE");
  dragRotate("shovel_b", "X", true, "RLl%`c5Yx1qL9UI0?5Oj", "kTgW|q~M[P3f=`Sat;/s");
  changeVis("shovel_arrow", true);
  outline("shovel_b", "ENABLE");
},
            function() {
  changeVis("shovel_arrow", false);
  outline("shovel_b", "DISABLE");
}, "kTgW|q~M[P3f=`Sat;/s");

changeVis("button_01", false);

registerOnHover("arm_03_c", function() {
  outline(arm_b_glow, "DISABLE");
  changeVis("arm_03_arrow", true);
  outline("arm_03_b", "ENABLE");
}, function() {
  changeVis("arm_03_arrow", false);
  outline("arm_03_b", "DISABLE");
});

registerOnDrag("arm_03_c", function() {},
            function() {
  outline(arm_b_glow, "DISABLE");
  dragRotate("arm_03_b", "X", true, ";-G6DNuc@uJ}XEra@dW$", "d6?5-hqoM%7n`_3rbU.R");
  changeVis("arm_03_arrow", true);
  outline("arm_03_b", "ENABLE");
},
            function() {
  changeVis("arm_03_arrow", false);
  outline("arm_03_b", "DISABLE");
}, "d6?5-hqoM%7n`_3rbU.R");

registerOnHover("shovel_c", function() {
  outline(arm_b_glow, "DISABLE");
  changeVis("shovel_arrow", true);
  outline("shovel_b", "ENABLE");
}, function() {
  changeVis("shovel_arrow", false);
  outline("shovel_b", "DISABLE");
});

registerOnClick("button_01", function() {
  changeVis("button_01", false);
  changeVis("button_grey", true);
  operateAnimation("PLAY", getAnimations(["GROUP", "panels"]), 0, 520, 'AUTO', 1, function() {
    changeVis("button_grey", false);
    changeVis("button_02", true);
  });
}, function() {});

"shovel_b";

registerOnClick("button_02", function() {
  changeVis("button_02", false);
  changeVis("button_grey", true);
  operateAnimation("PLAY", getAnimations("lens_cap_ICC"), 520, 620, 'AUTO', 1, function() {
    changeVis("button_grey", false);
    changeVis("button_03", true);
  });
}, function() {});

registerOnClick("button_03", function() {
  changeVis("button_03", false);
  changeVis("button_grey", true);
  operateAnimation("PLAY", getAnimations(["GROUP", "arm"]), 620, 1250, 'AUTO', 1, function() {
    changeVis("button_grey", false);
    changeVis("button_04", true);
  });
}, function() {});

objConstraintOperations('Child Of', "MUTE", "SEIS_v3d");
objConstraintOperations('Location Of', "REMOVE", "SEIS_v3d");
objConstraintOperations('Child Of', "REMOVE", "WTS_v3d");
objConstraintOperations('Location Of', "REMOVE", "WTS_v3d");
objConstraintOperations('Child Of', "REMOVE", "HP3_v3d");
objConstraintOperations('Location Of', "REMOVE", "HP3_v3d");

registerOnClick("button_04", function() {
  changeVis("button_04", false);
  changeVis("button_grey", true);
  operateAnimation("PLAY", getAnimations(["GROUP", "arm2"]), 1250, 1500, 'AUTO', 1, function() {
    objConstraintOperations('Child Of', "UNMUTE", "SEIS_v3d");
    operateAnimation("PLAY", getAnimations(["GROUP", "arm2"]), 1500, 1925, 'AUTO', 1, function() {
      objConstraintOperations('Child Of', "MUTE", "SEIS_v3d");
      objConstraintOperations('Location Of', "MUTE", "SEIS_v3d");
      operateAnimation("PLAY", getAnimations(["GROUP", "arm2"]), 1925, 2110, 'AUTO', 1, function() {
        changeVis("button_grey", false);
        changeVis("button_05", true);
      });
    });
  });
}, function() {});

registerOnClick("button_05", function() {
  changeVis("button_05", false);
  changeVis("button_grey", true);
  operateAnimation("PLAY", getAnimations(["GROUP", "arm3"]), 2110, 2410, 'AUTO', 1, function() {
    objConstraintOperations('Child Of', "REMOVE", "WTS_v3d");
    operateAnimation("PLAY", getAnimations(["GROUP", "arm3"]), 2410, 2945, 'AUTO', 1, function() {
      objConstraintOperations('Child Of', "REMOVE", "WTS_v3d");
      objConstraintOperations('Location Of', "REMOVE", "WTS_v3d");
      operateAnimation("PLAY", getAnimations(["GROUP", "arm3"]), 2945, 3170, 'AUTO', 1, function() {
        changeVis("button_grey", false);
        changeVis("button_06", true);
      });
    });
  });
}, function() {});

registerOnClick("button_06", function() {
  changeVis("button_06", false);
  changeVis("button_06", false);
  operateAnimation("PLAY", getAnimations(["GROUP", "arm4"]), 3250, 3490, 'AUTO', 1, function() {
    objConstraintOperations('Child Of', "REMOVE", "HP3_v3d");
    operateAnimation("PLAY", getAnimations(["GROUP", "arm4"]), 3490, 3860, 'AUTO', 1, function() {
      objConstraintOperations('Child Of', "REMOVE", "HP3_v3d");
      objConstraintOperations('Location Of', "REMOVE", "HP3_v3d");
      operateAnimation("PLAY", getAnimations(["GROUP", "arm4"]), 3860, 4150, 'AUTO', 1, function() {
        changeVis("button_manual_grey", true);
      });
    });
  });
}, function() {});

parts_list = ["HP3_v3d_baked", "ICC", "SEIS_baked", "UHF_antenna", "TWINS", "pressure_inlet", "IDC", "RISE_antennas", "grapple", "WTS_v3d_baked"];

registerOnHover(["GROUP", "arm_for_glow"], function() {
  if (mode == 'learn') {
    outline(["GROUP", "arm_for_glow"], "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline(["GROUP", "arm_for_glow"], "DISABLE");
  }
});

registerOnClick(["GROUP", "arm_for_glow"], function() {
  if (mode == 'learn') {
    getJSFunction('learnAboutPart')(["GROUP", "arm_for_glow"]);
  }
}, function() {});

registerOnClick(["GROUP", "panels"], function() {
  if (mode == 'learn') {
    getJSFunction('learnAboutPart')(["GROUP", "panels"]);
  }
}, function() {});

registerOnHover(["GROUP", "panels"], function() {
  if (mode == 'learn') {
    outline(["GROUP", "panels"], "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline(["GROUP", "panels"], "DISABLE");
  }
});

registerOnClick(parts_list, function() {
  if (mode == 'learn') {
    getJSFunction('learnAboutPart')(_pGlob.pickedObject);
  }
}, function() {});

registerOnHover("RISE_antennas", function() {
  if (mode == 'learn') {
    outline("RISE_antennas", "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline("RISE_antennas", "DISABLE");
  }
});

registerOnHover("TWINS", function() {
  if (mode == 'learn') {
    outline("TWINS", "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline("TWINS", "DISABLE");
  }
});

registerOnHover("HP3_v3d_baked", function() {
  if (mode == 'learn') {
    outline("HP3_v3d_baked", "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline("HP3_v3d_baked", "DISABLE");
  }
});

registerOnHover("ICC", function() {
  if (mode == 'learn') {
    outline("ICC", "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline("ICC", "DISABLE");
  }
});

registerOnHover("SEIS_baked", function() {
  if (mode == 'learn') {
    outline("SEIS_baked", "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline("SEIS_baked", "DISABLE");
  }
});

registerOnHover("UHF_antenna", function() {
  if (mode == 'learn') {
    outline("UHF_antenna", "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline("UHF_antenna", "DISABLE");
  }
});

registerOnHover("pressure_inlet", function() {
  if (mode == 'learn') {
    outline("pressure_inlet", "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline("pressure_inlet", "DISABLE");
  }
});

registerOnHover("IDC", function() {
  if (mode == 'learn') {
    outline("IDC", "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline("IDC", "DISABLE");
  }
});

registerOnHover("grapple", function() {
  if (mode == 'learn') {
    outline("grapple", "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline("grapple", "DISABLE");
  }
});

registerOnHover("WTS_v3d_baked", function() {
  if (mode == 'learn') {
    outline("WTS_v3d_baked", "ENABLE");
  }
}, function() {
  if (mode == 'learn') {
    outline("WTS_v3d_baked", "DISABLE");
  }
});

}

if (window.v3dApp) {
    // backwards compatibility for old player projects
    PL.legacyMode = true;
    PL.init(window.v3dApp);
}

})();

/* ================== end of code ================== */
    